var fs = require('fs');
var url = require('url');
var logger = require('./logger');
var utils = require('./utils');
var config = require('../config');

var initialized = false;
var responseHandlers = [];

function NET_RegisterHandler(path, callback)
{
  responseHandlers[path] = callback;
}

function NET_SendRawJsonResponse(response, responseBody)
{
  response.writeHead(200,
  {
    "Content-Type": "application/json"
  });
  response.write(responseBody);
  response.end();
}

function NET_SendJsonResponse(response, data)
{
  var responseBody = "{}";

  if (data != null)
  {
    responseBody = JSON.stringify(data);
  }

  NET_SendRawJsonResponse(response, responseBody);
}

function LiveStats_GetPlayer(uid)
{
  return JSON.stringify(LiveStats_GetPlayerObj(uid));
}

function LiveStats_GetPlayerObj(uid)
{
  var player = {};
  var file = "../data/saves/" + uid + ".json";

  if (uid != null && !isNaN(uid) && fs.existsSync(file))
  {
    player = JSON.parse(fs.readFileSync(file));
    if (player.alive) player.alive = true;
    else player.alive = false;
  }

  return player;
}

function LiveStats_SetPlayer(uid, data)
{
  if (uid != null && !isNaN(uid))
  {
    utils.overwriteFile("../data/saves/" + uid + ".json", data);
  }
}

function LiveStats_SetPlayerObj(uid, obj)
{
  LiveStats_SetPlayer(uid, JSON.stringify(obj));
}

function LiveStats_KillPlayer(uid)
{
  var player = LiveStats_GetPlayerObj(uid);
  player.alive = false;
  LiveStats_SetPlayerObj(uid, player);
}

// ----------------------------------------------------------------------------------+
// Handlers

function NET_InitEnvironment(request, response)
{
  logger.log("Environment init request handled.");

  // Resolve requested host
  var host = request.headers.host;
  if (host == null) host = "localhost";

  var environment = {
    envpri: "http://" + host + "/DayZServlet/", // Primary environment synchronization server
    envsec: "http://" + host + "/DayZServlet/" // Secondary environment synchronization server
  };

  NET_SendJsonResponse(response, environment);
}

function NET_PingResponse(request, response)
{
  logger.log("Ping request handled.");
  NET_SendJsonResponse(response);
}

function NET_LogSpawnStats(request, response)
{
  request.on("data", function(body)
  {
    var data = JSON.parse(body);
    logger.log("Server spawn (code: " + data.code + ", spawned: " + data.spawned + ", loaded: " + data.loaded + ") handled.");
  });

  NET_SendJsonResponse(response);
}

function NET_SendConfigResponse(response)
{
  // TODO: Probably reload the config here?
  NET_SendJsonResponse(response, config.dediConfig);
}

function NET_StartServer(request, response)
{
  NET_SendConfigResponse(response);
  logger.log("Server startup handled.");
}

function NET_SyncServer(request, response)
{
  NET_SendConfigResponse(response);
  logger.log("Server sync handled.");
}

function NET_ReportMessage(request, response)
{
  request.on("data", function(body)
  {
    var data = JSON.parse(body);
    logger.warn("Server report:" + data.message);
  });

  NET_SendJsonResponse(response);
}

function NET_HandleRequests(request, response)
{
  NET_SendJsonResponse(response, config.dediRequests);
  logger.log("Server requests handled.");
}

function NET_GetGlobalTypes(request, response)
{
  logger.log("Global type request handled.");

  var types = "{}";

  var file = "../data/type.json";

  if (fs.existsSync(file))
  {
    types = fs.readFileSync(file);
  }

  NET_SendRawJsonResponse(response, types);
}

function NET_SetGlobalTypes(request, response)
{
  logger.log("Global type saving handled.");

  request.on("data", function(body)
  {
    utils.overwriteFile("../data/type.json", body);
  });

  NET_SendJsonResponse(response);
}

function NET_FindPlayer(request, response)
{
  var query = url.parse(request.url, true).query;
  NET_SendRawJsonResponse(response, LiveStats_GetPlayer(query.uid));
  logger.log("Find player request handled (uid: " + query.uid + ").");
}

function NET_LoadPlayer(request, response)
{
  var query = url.parse(request.url, true).query;
  NET_SendRawJsonResponse(response, LiveStats_GetPlayer(query.uid));
  logger.log("Load player request handled (uid: " + query.uid + ").");
}

function NET_CreatePlayer(request, response)
{
  var query = url.parse(request.url, true).query;

  if (!fs.existsSync("../data/saves/" + query.uid + ".json"))
  {
    LiveStats_SetPlayer(query.uid, "{}");
  }

  logger.log("Create player request handled (uid: " + query.uid + ").");
  NET_SendJsonResponse(response);
}

function NET_SavePlayer(request, response)
{
  var query = url.parse(request.url, true).query;

  request.on("data", function(body)
  {
    LiveStats_SetPlayer(query.uid, body);
    logger.log("Save player request handled (uid: " + query.uid + ").");
  });

  NET_SendJsonResponse(response);
}

function NET_QueuePlayer(request, response)
{
  var query = url.parse(request.url, true).query;

  request.on("data", function(body)
  {
    var data = JSON.parse(body);
    var player = LiveStats_GetPlayerObj(query.uid);
    player.queue = data.queue; // Spawn delay
    LiveStats_SetPlayerObj(query.uid, player);
    logger.log("Queue player request handled (uid: " + query.uid + ", queue: " + data.queue + ").");
  });

  NET_SendJsonResponse(response);
}

function NET_DestroyPlayer(request, response)
{
  var query = url.parse(request.url, true).query;
  LiveStats_KillPlayer(query.uid);
  NET_SendJsonResponse(response);
  logger.log("Destroy player request handled (uid: " + query.uid + ").");
}

function NET_KillPlayer(request, response)
{
  var query = url.parse(request.url, true).query;
  LiveStats_KillPlayer(query.uid);
  NET_SendJsonResponse(response);
  logger.log("Kill player request handled (uid: " + query.uid + ").");
}

function NET_ParseRoot(request, response)
{
  response.writeHead(418,
  {
    "Content-Type": "text/html"
  });
  response.write("Hi");
  response.end();
}

function NET_RedirectRoot(request, response)
{
  response.writeHead(307,
  {
    "Location": "/"
  });
  response.end();
}

// DayZ favicon :D
function NET_ReturnFavicon(request, response)
{
  response.writeHead(200,
  {
    "Content-Type": "image/x-icon"
  });
  response.write(new Buffer("", 'base64'));
  response.end();
}

// ----------------------------------------------------------------------------------+
// Exports

function parse(path, request, response)
{
  var callback = responseHandlers[path];

  if (callback != null)
  {
    callback(request, response);
    return true;
  }

  return false;
}

function setup()
{
  if (initialized) return;
  initialized = true;

  utils.createDir("../data/");
  utils.createDir("../data/saves/");

  // Initialization
  NET_RegisterHandler("/DayZServlet/init/enviroment/", NET_InitEnvironment); // It's 'environment', not 'enviroment', Bohemia.
  NET_RegisterHandler("/DayZServlet/init/spawnstats/", NET_LogSpawnStats);
  NET_RegisterHandler("/DayZServlet/init/startup/", NET_StartServer);
  NET_RegisterHandler("/DayZServlet/init/sync/", NET_SyncServer);
  NET_RegisterHandler("/DayZServlet/init/reportmsg/", NET_ReportMessage);
  NET_RegisterHandler("/DayZServlet/init/requests/", NET_HandleRequests);
  NET_RegisterHandler("/DayZServlet/init/ping/", NET_PingResponse);

  // Types
  NET_RegisterHandler("/DayZServlet/w_0ld/global/type/get/", NET_GetGlobalTypes);
  NET_RegisterHandler("/DayZServlet/w_0ld/global/type/set/", NET_SetGlobalTypes);
  NET_RegisterHandler("/DayZServlet/w_0ld/globalstat/", NET_SetGlobalTypes); // v0.52

  // Player commands
  NET_RegisterHandler("/DayZServlet/a_0fg/find/", NET_FindPlayer);
  NET_RegisterHandler("/DayZServlet/a_0fg/load/", NET_LoadPlayer);
  NET_RegisterHandler("/DayZServlet/a_0fg/create/", NET_CreatePlayer);
  NET_RegisterHandler("/DayZServlet/a_0fg/save/", NET_SavePlayer);
  NET_RegisterHandler("/DayZServlet/a_0fg/queue/", NET_QueuePlayer);
  NET_RegisterHandler("/DayZServlet/a_0fg/destroy/", NET_DestroyPlayer);
  NET_RegisterHandler("/DayZServlet/a_0fg/kill/", NET_KillPlayer);

  // Others
  NET_RegisterHandler("/DayZServlet/", NET_RedirectRoot);
  NET_RegisterHandler("/DayZServlet", NET_RedirectRoot);
  NET_RegisterHandler("/favicon.ico", NET_ReturnFavicon);
  NET_RegisterHandler("/", NET_ParseRoot);
}

exports.parse = parse;
exports.setup = setup;
